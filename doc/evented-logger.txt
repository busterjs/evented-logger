Buster Evented logger 0.1.1 documentation
=========================================
:Author: Christian Johansen
:Email: christian@cjohansen.no

A simple evented console logger. In contrast to typical loggers,
buster-evented-logger does not print directly to an output stream. Instead, log
messages are emitted as events, decoupling the visualization/persistence of log
messages.

*buster-evented-logger* supports setting a log level to filter messages,
logging arbitrary many arguments with one call, customizable formatting of
objects and even custom log level hierarchies.

As most Buster projects, *buster-evented-logger* works equally well in Node.js
and in browsers.

Table of contents
-----------------

* <<api,API>>
* <<events,Events>>
* <<custom,Creating custom loggers>>
* <<formatters,Formatting logged data>>
* <<license,License (BSD)>>

[[api]]
API
---

Parts of the logger API is dynamically assembled by the +create+ function
described below. The API documentation also describes the methods dynamically
generated by this method in the default setup.

[[create]]
+buster.eventedLogger.create([opt])+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Creates a new logger. The default behavior is to create a logger with the
levels/methods +error+, +warn+, +log+ and +debug+. +"debug"+ is the default log
level, meaning that all messages are emitted. Through the +opt+ argument you can
control which levels the logger will support, what the default level is and how
the logger formats arguments.

The +opt+ argument can contain the following keys:

[horizontal]
+level+::
    The default log level, i.e. the minimum required level the logger will emit
    events for. Default value is +"debug"+, i.e. all messages.
+levels+::
    An array of levels the logger supports. Default is
    +["error", "warn", "log", "debug"]+. This option is described in more detail
    under <<custom,custom loggers>>.
+formatter+::
    The function that should format arguments. This option is described in more
    detail under <<formatters,formatting logged data>>.

[source,javascript]
----
// Typical usage
var sys = require("sys");
var logger = buster.eventedLogger.create();

logger.on("log", function (msg) {
    sys.puts("[" + msg.level.toUpperCase() + "] " + msg.message);
});

logger.warn("Watch it!");
logger.log([], 42, {});

// Prints the following to stdout:
// [WARN] Watch it!
// [LOG] [] 42 {}
----

[source,javascript]
----
// Setting the default level
var sys = require("sys");
var logger = buster.eventedLogger.create({ level: "warn" });

logger.on("log", function (msg) {
    sys.puts("[" + msg.level.toUpperCase() + "] " + msg.message);
});

logger.warn("Watch it!");
logger.log([], 42, {});

// Will not print the log message, so stdout looks like:
// [WARN] Watch it!
----

[[on]]
+logger.on(event, listener)+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Subscribe to an <<events,event>>.

[source,javascript]
----
var logger = buster.eventedLogger.create();

// Called whenever a message is logged
logger.on("log", function () { /* ... */ });
----

[[error]]
+logger.error(message1[, message2, ...])+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Logs messages with the "error" level. This message will always be emitted from
the logger unless the log level has been set to a non-existent level.

[source,javascript]
----
var logger = buster.eventedLogger.create();
// ...

logger.error("Something went wrong", myObjToDebug);
----

*NB!* If you have created a logger with custom levels, the +error+ method will
not exist unless you explicitly created it.

[[warn]]
+logger.warn(message1[, message2, ...])+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Logs messages with the "warn" level. This message will be emitted from the
logger unless its level is set to "error" or a non-existent level.

[source,javascript]
----
var logger = buster.eventedLogger.create();
// ...

logger.warn("Something fishy?", myObjToDebug);
----

*NB!* If you have created a logger with custom levels, the +warn+ method will
not exist unless you explicitly created it.

[[log]]
+logger.log(message1[, message2, ...])+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Logs messages with the "log" level. This message will be emitted from the
logger if its level is set to "log" or "debug" (default).

[source,javascript]
----
var logger = buster.eventedLogger.create();
// ...

logger.log("Here's an object", myObjToDebug);
----

*NB!* If you have created a logger with custom levels, the +log+ method will
not exist unless you explicitly created it.

[[debug]]
+logger.debug(message1[, message2, ...])+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Logs messages with the "debug" level. This message will only be emitted from the
logger if its level is set to "debug" (default).

[source,javascript]
----
var logger = buster.eventedLogger.create();
// ...

logger.debug("What's going on??", myObjToDebug);
----

*NB!* If you have created a logger with custom levels, the +debug+ method will
not exist unless you explicitly created it.

+logger.format(object)+
~~~~~~~~~~~~~~~~~~~~~~~

Formats a logged object. This function is called once for each argument passed
to a logger method. The default implementation serializes objects through
+JSON.stringify+. Functions and primitives are converted to strings by way of
their +toString+ methods.

The method can be overridden to provide more powerful formatting of objects such
as functions and problematic host objects, see <<formatters, formatting event data>>.

[[events]]
Events
------

*buster-evented-logger* currently only emits a single type of events.

Event: +"log"+
~~~~~~~~~~~~~~

[source,javascript]
----
function (msg) {}
----

Emitted every time data is logged and is allowed by the current log level. Any
messages logged to the current level or a higher priority level will be
emitted. The listener will receive a single bundle which has the following
properties:

[horizontal]
+level+::
    The log level as a lower case string, e.g. +"debug"+
+message+::
    A readily formatted log message, containing all arguments passed to the log
    method joined by a single blank space.

[[custom]]
Creating custom loggers
-----------------------

By passing an array of desired log levels to +buster.eventedLogger.create+ you
can create logger objects with a customized set of methods. The levels should be
passed ordered from highest to lowest significance. The generated methods will
pass through messages if the current log level is set to either the same level
as the message or one in the lower indexes of the levels array.

When you create a logger with customized levels, the default log level will be
set to the most permissive one, i.e. the last level in the array.

[source,javascript]
----
var logger = buster.eventedLogger.create({
    levels: ["nuclear", "eerie", "info", "debug"]
});

logger.level == "debug"; //=> true
typeof logger.error == "undefined";

logger.nuclear("This is NOT good");
----

If you want the logger to have some other default log level than the most
permissive one, include the +level+ option argument:

[source,javascript]
----
var logger = buster.eventedLogger.create({
    levels: ["nuclear", "eerie", "info", "debug"],
    level: "eerie"
});

logger.info("This is NOT good"); // Won't be emitted
----

[[formatters]]
Formatting logged data
----------------------

The +buster.eventedLogger.format+ method is available for your customization
pleasure. All arguments passed to the logger methods are passed through this
method, and you can override it to provide customized formatting.

*buster-test* provides more readable formatting through the *buster-format*
module. There is basically three ways to achieve this:

Override the original method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
----
buster.eventedLogger.format = buster.format.ascii;
----

Override the method on an instance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
----
var logger = buster.eventedLogger.create();
logger.format = buster.format.ascii;
----

Pass the logger to the +create+ method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
----
var logger = buster.eventedLogger.create({
    logger: buster.format.ascii
});
----

[[license]]
buster-evented-logger license
-----------------------------

include::../LICENSE[]
